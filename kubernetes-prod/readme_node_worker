 sudo apt-get install -y apt-transport-https ca-certificates curl gpg  устанавливаем доп пакеты 
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg   ключи для репы
 echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list  адрес репы 
 sudo apt-get update обновляем пакеты после добавление репы
 sudo apt-get install -y kubelet kubeadm kubectl  устанавливаем  по   для кубера 
sudo systemctl enable --now kubelet  выключаем автообновление сервисов кубера 
sudo swapoff -a отключаем свап 
 wget https://github.com/containerd/containerd/releases/download/v1.6.8/containerd-1.6.8-linux-amd64.tar.gz   устанавливаем cri 
 sudo tar Cxzvf /usr/local containerd-1.6.8-linux-amd64.tar.gz
wget https://github.com/opencontainers/runc/releases/download/v1.1.3/runc.amd64 
 sudo install -m 755 runc.amd64 /usr/local/sbin/runc
 wget https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz
sudo mkdir -p /opt/cni/bin
sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.1.1.tgz
 sudo mkdir /etc/containerd
 containerd config default | sudo tee /etc/containerd/config.toml
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml   включаем cgroup
 sudo curl -L https://raw.githubusercontent.com/containerd/containerd/main/containerd.service -o /etc/systemd/system/containerd.service
 sudo systemctl daemon-reload
sudo systemctl enable --now containerd

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF  смотрим значение 
sudo modprobe overlay
sudo modprobe br_netfilter
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF   вносим изменения 

sudo sysctl --system
lsmod | grep br_netfilter
lsmod | grep overlay
sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
после инициализации мастера мы получаем команду,  с помощью него добавляем ноду в кластер
пример:
# kubeadm join 10.128.0.24:6443 --token qxmls9.eg8zayjgmr1d9fti \
        --discovery-token-ca-cert-hash sha256:514478ce11e3b57e8438664df1690fb77d51d49d634576d64b6f3d3a1b3e7f23



